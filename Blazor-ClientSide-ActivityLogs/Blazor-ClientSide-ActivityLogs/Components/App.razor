<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["Blazor-ClientSide-ActivityLogs.styles.css"]" />
    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script>
        // On page load, wire up the click listener
        window.addEventListener('DOMContentLoaded', () => {
            let lastFiveClicks = JSON.parse(localStorage.getItem('lastFiveClicks')) || [];

            document.addEventListener('click', (e) => {
                let route = window.location.href;
                let elementClass = e.target.className;
                let clickX = e.clientX;
                let clickY = e.clientY;

                const readableTarget = targetToString(e.target);

                let clickEntry = {
                    route: route,
                    target: readableTarget,
                    class: elementClass,
                    x: clickX,
                    y: clickY,
                    time: new Date().toISOString()
                };

                // Add to the array
                lastFiveClicks.push(clickEntry);

                // Keep only the last 5
                if (lastFiveClicks.length > 5) {
                    lastFiveClicks.shift();
                }

                // Store in localStorage
                localStorage.setItem('lastFiveClicks', JSON.stringify(lastFiveClicks));

                // Show a small popup (toast)
                showClickPopup(elementClass);
            });

            function targetToString(el) {
                if (!el || !el.tagName) {
                    return "Unknown Element";
                }

                // Tag name in lowercase, e.g. "button"
                const tag = el.tagName.toLowerCase();

                // If there's an ID, prefix it with '#', e.g. "#submitBtn"
                const idPart = el.id ? `#${el.id}` : "";

                // Build up the class list, e.g. ".btn.btn-primary"
                let classPart = "";
                if (el.classList && el.classList.length > 0) {
                    classPart = "." + Array.from(el.classList).join(".");
                }

                // Optionally handle some special element types
                let extraInfo = "";
                if (tag === "input" || tag === "button") {
                    // e.g. <button type="submit">
                    const typeAttr = el.getAttribute("type");
                    if (typeAttr) {
                        extraInfo = `(type=${typeAttr})`;
                    }
                }

                return `${tag}${idPart}${classPart} ${extraInfo}`.trim();
            }


            // Minimalistic toast function
            function showClickPopup(clickedClass) {
                // Create a new div
                const popup = document.createElement('div');
                popup.innerText = `Clicked: ${clickedClass || "(no class)"} `;
                popup.className = "click-popup";

                // Append to container
                const container = document.getElementById('clickPopupContainer');
                container.appendChild(popup);

                // Remove after 2 seconds
                setTimeout(() => {
                    popup.remove();
                }, 2000);
            }
        });
    </script>
</body>

</html>
